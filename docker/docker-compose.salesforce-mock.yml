# Salesforce API Mock Service for SnapLogic Testing
# ==================================================
#
# This Docker Compose file provides a Salesforce API mock environment specifically
# for testing SnapLogic Salesforce Snap integrations with both HTTP and HTTPS support.
#
# QUICK START:
# -----------
# Start the service:
#   docker-compose -f docker-compose.salesforce-mock.yml up -d
#
# Stop the service:
#   docker-compose -f docker-compose.salesforce-mock.yml down
#
# AVAILABLE ENDPOINTS:
# -------------------
# Salesforce Mock API (HTTP): http://localhost:8089
# Salesforce Mock API (HTTPS): https://localhost:8443
# - OAuth Token: POST http(s)://localhost:8089/services/oauth2/token
# - REST API: http(s)://localhost:8089/services/data/v59.0/*
# - Bulk API: http(s)://localhost:8089/services/async/59.0/*
#
# SNAPLOGIC CONFIGURATION:
# -----------------------
# For Salesforce Account settings in SnapLogic:
# 
# HTTP Configuration:
# - Login URL: http://salesforce-api-mock:8080
# 
# HTTPS Configuration:
# - Login URL: https://salesforce-api-mock:8443
# 
# Common Settings:
# - Username: snap-qa@snaplogic.com (or any value)
# - Password: any value
# - Security Token: leave empty (or any value)
# 
# Note: Use container name and internal ports (8080/8443) when SnapLogic 
# is running in Docker on the same network. If SnapLogic is running 
# on your host machine, use http://localhost:8089 or https://localhost:8443
#
# The mock will accept any credentials and return a valid response.
#
# HTTPS NOTES:
# -----------
# - WireMock uses a self-signed certificate by default
# - For production, mount custom certificates (see salesforce-mock-custom-cert service example)
# - When testing with curl, use -k flag to accept self-signed certificates

version: '3.8'

services:
  # WireMock - Salesforce API Mock Server with HTTP and HTTPS
  salesforce-mock:
    image: wiremock/wiremock:3.3.1
    container_name: salesforce-api-mock
    profiles:
      - salesforce-dev
    ports:
      - "8089:8080"  # HTTP port
      - "8443:8443"  # HTTPS port
    volumes:
      # Mount Salesforce-specific mock mappings
      - ./scripts/salesforce/wiremock/mappings:/home/wiremock/mappings:ro
      - ./scripts/salesforce/wiremock/__files:/home/wiremock/__files:ro
      # Mount custom certificate keystore
      - ./scripts/salesforce/wiremock/certs/custom-keystore.p12:/home/wiremock/keystore.p12:ro
    command: >
      --port=8080
      --https-port=8443
      --https-keystore=/home/wiremock/keystore.p12
      --keystore-password=password
      --keystore-type=PKCS12
      --global-response-templating 
      --verbose 
      --disable-banner
      --enable-stub-cors
      --preserve-host-header
    networks:
      - snaplogicnet
    environment:
      - WIREMOCK_OPTIONS=--max-request-journal-entries=1000
      - JAVA_OPTS=-Djava.security.egd=file:/dev/./urandom
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/__admin/health || curl -fk https://localhost:8443/__admin/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Alternative: WireMock with Custom SSL Certificate (Uncomment if needed)
  # salesforce-mock-custom-cert:
  #   image: wiremock/wiremock:3.3.1
  #   container_name: salesforce-api-mock-ssl
  #   profiles:
  #     - salesforce-ssl
  #   ports:
  #     - "8089:8080"
  #     - "8443:8443"
  #   volumes:
  #     - ./scripts/salesforce/wiremock/mappings:/home/wiremock/mappings:ro
  #     - ./scripts/salesforce/wiremock/__files:/home/wiremock/__files:ro
  #     - ./certs/keystore.p12:/home/wiremock/keystore.p12:ro
  #   command: >
  #     --port=8080
  #     --https-port=8443
  #     --https-keystore=/home/wiremock/keystore.p12
  #     --keystore-password=password
  #     --keystore-type=PKCS12
  #     --global-response-templating 
  #     --verbose 
  #     --disable-banner
  #     --enable-stub-cors
  #     --preserve-host-header
  #   networks:
  #     - snaplogicnet
  #   environment:
  #     - WIREMOCK_OPTIONS=--max-request-journal-entries=1000

  # Alternative: Prism Mock (OpenAPI-based) - Uncomment if preferred
  # salesforce-prism:
  #   image: stoplight/prism:4
  #   container_name: salesforce-prism-mock
  #   ports:
  #     - "8080:4010"
  #   volumes:
  #     - ./wip/api-specs/salesforce:/specs:ro
  #   command: mock -h 0.0.0.0 /specs/salesforce-openapi.yaml
  #   networks:
  #     - snaplogicnet

  # JSON Server - For persistent CRUD operations
  salesforce-json-server:
    image: clue/json-server
    container_name: salesforce-json-mock
    profiles:
      - salesforce-dev
    ports:
      - "8082:80"
    volumes:
      - ./scripts/salesforce/json-db:/data
    command: --watch /data/salesforce-db.json --host 0.0.0.0
    networks:
      - snaplogicnet

networks:
  snaplogicnet:
    driver: bridge

# Usage Examples:
# ==============
#
# HTTP Examples:
# -------------
# 1. Test OAuth Authentication (HTTP):
#    curl -X POST http://localhost:8089/services/oauth2/token \
#      -H "Content-Type: application/x-www-form-urlencoded" \
#      -d "grant_type=password&client_id=test&client_secret=test&username=test@test.com&password=test"
#
# 2. Query Accounts (HTTP):
#    curl -X GET "http://localhost:8089/services/data/v59.0/query?q=SELECT+Id,Name+FROM+Account" \
#      -H "Authorization: Bearer mock-token-12345"
#
# HTTPS Examples:
# --------------
# 3. Test OAuth Authentication (HTTPS with self-signed cert):
#    curl -k -X POST https://localhost:8443/services/oauth2/token \
#      -H "Content-Type: application/x-www-form-urlencoded" \
#      -d "grant_type=password&client_id=test&client_secret=test&username=test@test.com&password=test"
#
# 4. Query Accounts (HTTPS):
#    curl -k -X GET "https://localhost:8443/services/data/v59.0/query?q=SELECT+Id,Name+FROM+Account" \
#      -H "Authorization: Bearer mock-token-12345"
#
# 5. Create Account (HTTPS):
#    curl -k -X POST https://localhost:8443/services/data/v59.0/sobjects/Account \
#      -H "Content-Type: application/json" \
#      -H "Authorization: Bearer mock-token-12345" \
#      -d '{"Name": "Test Account", "Type": "Customer"}'
#
# 6. Get Account by ID (HTTPS):
#    curl -k -X GET https://localhost:8443/services/data/v59.0/sobjects/Account/001000000000001 \
#      -H "Authorization: Bearer mock-token-12345"
#
# Custom Certificate Setup:
# ------------------------
# To use custom SSL certificates instead of self-signed:
#
# 1. Generate certificates:
#    openssl genrsa -out key.pem 2048
#    openssl req -new -x509 -key key.pem -out cert.pem -days 365 \
#      -subj "/C=US/ST=CA/L=San Francisco/O=SnapLogic/CN=salesforce-api-mock"
#    openssl pkcs12 -export -out keystore.p12 -inkey key.pem -in cert.pem \
#      -password pass:password -name wiremock
#
# 2. Place keystore.p12 in ./certs/ directory
#
# 3. Uncomment and use the salesforce-mock-custom-cert service instead
#
# Troubleshooting:
# ---------------
# - Check logs: docker-compose -f docker-compose.salesforce-mock.yml logs salesforce-mock
# - Verify HTTPS is working: curl -kv https://localhost:8443/__admin/health
# - Test HTTP fallback: curl http://localhost:8089/__admin/health
# - For certificate issues, ensure JAVA_OPTS includes -Djava.security.egd=file:/dev/./urandom
